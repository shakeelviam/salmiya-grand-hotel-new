generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  accounts          Account[]
  payments          Payment[]
  permissionHistory PermissionHistory[]
  reservations      Reservation[]
  rolePermissions   RolePermission[]
  sessions          Session[]
  roles             Role[]              @relation("RoleToUser")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[] @relation("PermissionToRole")
  users       User[]       @relation("RoleToUser")
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  subject         String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  action          String
  rolePermissions RolePermission[]
  roles           Role[]           @relation("PermissionToRole")
}

model RolePermission {
  id           String     @id @default(cuid())
  userId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, permissionId])
}

model PermissionHistory {
  id        String   @id @default(cuid())
  roleId    String
  userId    String
  action    String
  createdAt DateTime @default(now())
  details   String?
  user      User     @relation(fields: [userId], references: [id])
}

model Room {
  id           String        @id @default(cuid())
  number       String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  description  String?
  isActive     Boolean       @default(true)
  price        Float
  type         String
  reservations Reservation[]
}

model Reservation {
  id          String    @id @default(cuid())
  roomId      String
  checkIn     DateTime
  checkOut    DateTime
  totalAmount Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  status      String
  orders      Order[]
  payments    Payment[]
  room        Room      @relation(fields: [roomId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Payment {
  id            String      @id @default(cuid())
  amount        Float
  reservationId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userId        String
  method        String
  status        String
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

model MenuCategory {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  menuItems   MenuItem[]
}

model MenuItem {
  id          String       @id @default(cuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  categoryId  String
  category    MenuCategory @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
}

model Order {
  id            String       @id @default(cuid())
  reservationId String?
  roomNumber    String?
  totalAmount   Float
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  status        String
  reservation   Reservation? @relation(fields: [reservationId], references: [id])
  items         OrderItem[]
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  menuItemId String
  quantity   Int
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id])
}
