generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                         String              @id @default(cuid())
  name                       String?
  email                      String?             @unique
  emailVerified              DateTime?
  image                      String?
  password                   String?
  accounts                   Account[]
  payments                   Payment[]
  permissionHistory          PermissionHistory[]
  reservations               Reservation[]
  rolePermissions            RolePermission[]
  sessions                   Session[]
  roles                      Role[]              @relation("RoleToUser")
  resetToken                 String?             @unique
  resetTokenExpiry           DateTime?
  verifyToken                String?             @unique
  verifyTokenExpiry          DateTime?
  createdAt                  DateTime            @default(now())
  updatedAt                  DateTime            @updatedAt
  expenses                   Expense[]
  assignedTasks              MaintenanceTask[]   @relation("AssignedTasks")
  createdTasks               MaintenanceTask[]   @relation("CreatedTasks")
  completedTasks             MaintenanceTask[]   @relation("CompletedTasks")
  assignedHousekeepingTasks  HousekeepingTask[]  @relation("AssignedHousekeepingTasks")
  createdHousekeepingTasks   HousekeepingTask[]  @relation("CreatedHousekeepingTasks")
  completedHousekeepingTasks HousekeepingTask[]  @relation("CompletedHousekeepingTasks")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[] @relation("PermissionToRole")
  users       User[]       @relation("RoleToUser")
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  subject         String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  action          String
  rolePermissions RolePermission[]
  roles           Role[]           @relation("PermissionToRole")
}

model RolePermission {
  id           String     @id @default(cuid())
  userId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, permissionId])
}

model PermissionHistory {
  id        String   @id @default(cuid())
  roleId    String
  userId    String
  action    String
  createdAt DateTime @default(now())
  details   String?
  user      User     @relation(fields: [userId], references: [id])
}

model RoomType {
  id             String        @id @default(cuid())
  name           String        @unique
  description    String
  descriptionAr  String       @default("")
  basePrice      Float
  adultCapacity  Int
  childCapacity  Int
  extraBedCharge Float
  amenities      String[]
  imageUrl       String?
  status         String        @default("ACTIVE") // ACTIVE or DISABLED
  rooms          Room[]
  reservations   Reservation[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Room {
  id                String             @id @default(cuid())
  number            String             @unique
  floor             String
  roomTypeId        String
  amenities         String[]
  status            String             @default("AVAILABLE") // AVAILABLE, OCCUPIED, MAINTENANCE, DISABLED
  notes             String?
  roomType          RoomType           @relation(fields: [roomTypeId], references: [id])
  reservations      Reservation[]
  roomServices      RoomService[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  isActive          Boolean            @default(true)
  maintenanceTasks  MaintenanceTask[]  @relation("RoomMaintenanceTasks")
  housekeepingTasks HousekeepingTask[] @relation("RoomHousekeepingTasks")
}

model GroupBooking {
  id                 String        @id @default(cuid())
  groupName          String
  organizationName   String?
  contactPerson      String
  contactEmail       String
  contactPhone       String
  specialRates       Boolean       @default(false)
  discountPercentage Float?
  notes              String?
  status             String        @default("ACTIVE") // ACTIVE, COMPLETED, CANCELLED
  startDate          DateTime
  endDate            DateTime
  totalRooms         Int
  reservations       Reservation[]
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

model Reservation {
  id                  String            @id @default(cuid())
  roomId              String?
  roomTypeId          String
  groupBookingId      String?
  checkIn             DateTime
  checkOut            DateTime
  adults              Int
  children            Int
  extraBeds           Int               @default(0)
  roomCharges         Float
  extraBedCharges     Float
  serviceCharges      Float
  totalAmount         Float
  advanceAmount       Float             @default(0)
  pendingAmount       Float
  status              ReservationStatus @default(UNCONFIRMED)
  noShowDate          DateTime?
  noShowFee           Float?
  activityLogs        ActivityLog[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  userId              String
  guestId             String
  specialRequests     String?
  room                Room?             @relation(fields: [roomId], references: [id])
  roomType            RoomType          @relation(fields: [roomTypeId], references: [id])
  user                User              @relation(fields: [userId], references: [id])
  guest               Guest             @relation(fields: [guestId], references: [id])
  groupBooking        GroupBooking?     @relation(fields: [groupBookingId], references: [id])
  roomServices        RoomService[]
  payments            Payment[]
  bills               Bill[]
  Order               Order[]
  requiresAdminRefund Boolean           @default(false)
}

model Bill {
  id              String        @id @default(cuid())
  reservationId   String
  billNumber      String        @unique
  roomCharges     Float
  extraBedCharges Float
  serviceCharges  Float
  totalAmount     Float
  paidAmount      Float
  pendingAmount   Float
  status          BillStatus    @default(UNPAID)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  reservation     Reservation   @relation(fields: [reservationId], references: [id])
  payments        Payment[]
  roomServices    RoomService[]
}

enum BillStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
}

model RoomService {
  id            String        @id @default(cuid())
  roomId        String
  reservationId String
  serviceId     String
  quantity      Int           @default(1)
  status        ServiceStatus @default(PENDING)
  notes         String?
  amount        Float
  billId        String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  room          Room          @relation(fields: [roomId], references: [id])
  reservation   Reservation   @relation(fields: [reservationId], references: [id])
  service       Service       @relation(fields: [serviceId], references: [id])
  bill          Bill?         @relation(fields: [billId], references: [id])
}

model ServiceCategory {
  id          String      @id @default(cuid())
  name        String      @unique
  type        ServiceType
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  services    Service[]
}

model Service {
  id           String          @id @default(cuid())
  name         String
  description  String?
  price        Float
  isActive     Boolean         @default(true)
  categoryId   String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  category     ServiceCategory @relation(fields: [categoryId], references: [id])
  roomServices RoomService[]
}

model MenuCategory {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  menuItems   MenuItem[]
}

model MenuItem {
  id          String       @id @default(cuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  categoryId  String
  category    MenuCategory @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
}

model Order {
  id            String       @id @default(cuid())
  reservationId String?
  roomNumber    String?
  totalAmount   Float
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  status        String
  reservation   Reservation? @relation(fields: [reservationId], references: [id])
  items         OrderItem[]
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  menuItemId String
  quantity   Int
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id])
}

model PaymentMode {
  id          String    @id @default(cuid())
  name        String    @unique
  code        String    @unique
  description String?
  isEnabled   Boolean   @default(true)
  isDefault   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  payments    Payment[]
}

model Payment {
  id            String        @id @default(cuid())
  billId        String?
  reservationId String
  amount        Float
  receiptNumber String        @unique
  paymentType   PaymentType   @default(ADVANCE)
  status        PaymentStatus
  transactionId String?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  reservation   Reservation   @relation(fields: [reservationId], references: [id])
  bill          Bill?         @relation(fields: [billId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  paymentMode   PaymentMode   @relation(fields: [paymentModeId], references: [id])
  paymentModeId String
}

model Guest {
  id             String        @id @default(cuid())
  name           String
  email          String        @unique
  phone          String
  nationality    String
  passportNumber String
  passportCopy   String?
  otherDocuments String[]
  civilId        String?
  visaNumber     String?
  vipStatus      Boolean       @default(false)
  isActive       Boolean       @default(true)
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  reservations   Reservation[]
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  CLEANING
  MAINTENANCE
}

enum ReservationStatus {
  UNCONFIRMED      // Initial state when reservation is created
  CONFIRMED        // After payment is received
  CHECKED_IN       // Guest has checked in
  CHECKED_OUT      // Guest has checked out
  CANCELLED        // Reservation was cancelled
  NO_SHOW          // Guest didn't show up
  EXTENDED         // Stay was extended
  ROOM_CHANGED     // Room was changed during stay
  EARLY_CHECKOUT   // Guest checked out before scheduled date
}

enum ServiceType {
  FOOD
  NON_FOOD
}

enum ServiceStatus {
  PENDING
  IN_PROGRESS
  READY
  COMPLETED
  CANCELLED
}

enum PaymentType {
  ADVANCE
  SETTLEMENT
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

model Expense {
  id          String   @id @default(cuid())
  category    String
  description String
  amount      Float
  date        DateTime
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
}

model MaintenanceTask {
  id            String    @id @default(cuid())
  title         String
  description   String
  priority      String
  status        String    @default("pending")
  roomId        String?
  room          Room?     @relation("RoomMaintenanceTasks", fields: [roomId], references: [id])
  assignedToId  String
  assignedTo    User      @relation("AssignedTasks", fields: [assignedToId], references: [id])
  createdById   String
  createdBy     User      @relation("CreatedTasks", fields: [createdById], references: [id])
  completedById String?
  completedBy   User?     @relation("CompletedTasks", fields: [completedById], references: [id])
  dueDate       DateTime
  completedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model HousekeepingTask {
  id            String    @id @default(cuid())
  type          String
  priority      String
  status        String    @default("pending")
  roomId        String
  room          Room      @relation("RoomHousekeepingTasks", fields: [roomId], references: [id])
  assignedToId  String
  assignedTo    User      @relation("AssignedHousekeepingTasks", fields: [assignedToId], references: [id])
  createdById   String
  createdBy     User      @relation("CreatedHousekeepingTasks", fields: [createdById], references: [id])
  completedById String?
  completedBy   User?     @relation("CompletedHousekeepingTasks", fields: [completedById], references: [id])
  dueDate       DateTime
  completedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ActivityLog {
  id            String       @id @default(cuid())
  action        String
  description   String
  createdAt     DateTime     @default(now())
  reservationId String?
  reservation   Reservation? @relation(fields: [reservationId], references: [id])

  @@index([reservationId])
}

model HotelSettings {
  id                  String   @id @default(cuid())
  checkInTime         String
  checkOutTime        String
  earlyCheckOutPolicy Json
  noShowPolicy        Json
  lateCheckOutPolicy  Json
  autoCheckOut        Json
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model HotelPolicy {
  id                      String   @id @default(cuid())
  checkInTime            String   // Format: "HH:mm"
  checkOutTime           String   // Format: "HH:mm"
  lateCheckoutCharge     Float    // Per hour charge
  earlyCheckoutCharge    Float    // Flat charge
  maxLateCheckoutHours   Int      // Maximum hours allowed for late checkout
  
  // Cancellation policies
  freeCancellationHours  Int      // Hours before check-in for free cancellation
  cancellationCharge     Float    // Percentage of total amount
  
  // No show policies
  noShowCharge          Float    // Percentage of total amount
  noShowDeadlineHours   Int      // Hours after check-in time to mark as no-show
  
  // Payment policies
  advancePaymentPercent Float    // Required advance payment percentage
  fullPaymentDeadline   Int      // Hours before check-in for full payment
  
  // Reservation policies
  unconfirmedHoldHours  Int      // Hours to hold unconfirmed reservation
  minAdvanceBookingHours Int     // Minimum hours before check-in for booking
  maxAdvanceBookingDays Int      // Maximum days in advance for booking
  
  // Group booking policies
  minGroupSize          Int      // Minimum rooms for group booking
  groupDiscountPercent  Float    // Default group discount percentage
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
